[
  {
    "objectID": "tuto_commune_2020.html",
    "href": "tuto_commune_2020.html",
    "title": "Tutorial on describing French municipalities",
    "section": "",
    "text": "Aim\nThe goal is to explore the steps of data processing that are needed to get information on French agricultural landscape using freely available data and R.\nThe communes (=town, municipality) in 2020 are used as the scale and backbone of our analysis.\n\n\n0. Setting-up\n\nInstall and load packages\nFor this workflow, we need a few packages. Let’s load them (and install them if needed).\n\n# make sure needed packages are installed\npak &lt;- c(\"sf\", \"terra\", \"mapsf\", \"here\", \"archive\", \"lwgeom\", \"exactextractr\")\nif (!requireNamespace(pak, quietly = TRUE)) {\n  install.packages(pak)\n}\n\n# load packages\nlibrary(sf) |&gt; suppressPackageStartupMessages()\nsf_use_s2(FALSE) |&gt; suppressMessages()\n# with sf_use_s2(FALSE), sf uses lwgeom package for st_area\nlibrary(terra) |&gt; suppressPackageStartupMessages()\nlibrary(mapsf)\nlibrary(here) |&gt; suppressPackageStartupMessages()\nlibrary(archive)\nlibrary(exactextractr)\n\n# On Rossinante, we need to install libarchive\n# * deb: libarchive-dev (Debian, Ubuntu, etc)\n\n\n\nDownload data\nFour datasets are needed to run the following analysis. You can download them one by one by hand and move them to the data/ folder. Or you can run the code below to do this step automatically (total size: &gt;2Gb).\n\n\nCode\n# set data directory\ndatadir &lt;- here::here(\"data\")\nif (!dir.exists(datadir)) {\n  dir.create(\n    path = datadir,\n    showWarnings = FALSE,\n    recursive = TRUE\n  )\n}\n\noptions(timeout = 1500)\n\n# download commune data\nfile1 &lt;- \"ADMIN-EXPRESS-COG_2-1_2020-11-20_COMMUNE.\"\nurl1 &lt;- \"https://data.geopf.fr/telechargement/download/ADMIN-EXPRESS-COG/ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-11-20/ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-11-20.7z\"\ndirshp &lt;- \"ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-11-20/ADMIN-EXPRESS-COG/1_DONNEES_LIVRAISON_2020-11-20/ADE-COG_2-1_SHP_WGS84G_FRA/COMMUNE.\"\nshpext &lt;- c(\"cpg\", \"dbf\", \"prj\", \"shp\", \"shx\")\nif (!file.exists(here::here(datadir, paste0(file1, shpext[1])))) {\n  # download archive\n  temp &lt;- file.path(datadir, \"temp.7z\")\n  download.file(url1, temp, mode = \"wb\")\n  # extract only the COMMUNE.shp\n  archive::archive_extract(temp, dir = datadir, files = paste0(dirshp, shpext))\n  # copy and rename\n  file.copy(\n    from = file.path(datadir, paste0(dirshp, shpext)),\n    to = file.path(datadir, paste0(file1, shpext))\n  )\n  # remove temporary files\n  file.remove(file.path(datadir, paste0(dirshp, shpext)))\n  file.remove(temp)\n  # remove temporary repository\n  unlink(\n    file.path(datadir, \"ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-11-20\"),\n    recursive = TRUE\n  )\n}\n\n# download agreste dataset (not needed if repository cloned)\nfile2 &lt;- \"data_Agreste_Commune.csv\"\nurl2 &lt;- \"https://github.com/rfrelat/frenchmap/raw/refs/heads/main/data/data_Agreste_Commune.csv\"\nif (!file.exists(file.path(datadir, file2))) {\n  temp &lt;- file.path(datadir, file2)\n  download.file(url2, temp, mode = \"wb\")\n}\n\n# download bio parcelles RPG data\nfile3 &lt;- \"rpg-bio-2020-national.shp\"\nurl3 &lt;- \"https://www.data.gouv.fr/api/1/datasets/r/6428e701-1229-43b7-aaf7-16bbed2ea507\"\nif (!file.exists(file.path(datadir, file3))) {\n  temp &lt;- file.path(datadir, \"rpg-bio-2020-national.zip\")\n  download.file(url3, temp, mode = \"wb\")\n  unzip(temp, exdir = datadir)\n  file.remove(temp)\n}\n\n\n# download OSO land cover plus\nfile4 &lt;- \"Classif_Seed_0_2020.tif\"\nurl4 &lt;- \"https://zenodo.org/records/6538861/files/Classif_Seed_0_2020.tif?download=1\"\nif (!file.exists(file.path(datadir, file4))) {\n  temp &lt;- file.path(datadir, file4)\n  download.file(url4, temp, mode = \"wb\")\n}\n\n\n\n\n\n1. Load Admin Express commune\nThe spatial definition of commune comes from IGN Geoservices. We will use the shapefile for the year 2020: ADMIN-EXPRESS-COG_2-1_2020-11-20_COMMUNE.shp.\nAfter download and extraction of the archive, load the data in R:\n\n# load shapefile\ncommune &lt;- st_read(\"data/ADMIN-EXPRESS-COG_2-1_2020-11-20_COMMUNE.shp\")\n\n# remove DOM-TOM\ncommune &lt;- commune[!commune$INSEE_DEP %in% 971:976, ]\n\n# for mapping and extraction, we project the shapefile to Lambert 93 (EPSG:2154)\ncommune_L93 &lt;- st_transform(commune, crs = 2154)\n\n# calculate area in ha\ncommune_L93$area_ha &lt;- as.numeric(st_area(commune_L93)) * 0.0001\n\n\n\nVisualization\n\n\nCode\n# visualize the area of communes\nmf_map(\n  x = commune_L93,\n  var = \"area_ha\",\n  type = \"choro\",\n  breaks = \"geom\",\n  nbreaks = 8,\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"ha\",\n)\n# layout elements\nmf_title(\"Commune surface\")\nmf_credits(\"Sources: IGN Geoservices, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\n\n2. Extract information from CSV\nAs an example, we will use data from Agreste downloaded at the commune level for 2020.\n\nagreste &lt;- read.table(\n  \"data/data_Agreste_Commune.csv\",\n  skip = 2,\n  sep = \";\",\n  quote = \"\\\"\",\n  header = TRUE,\n  na.strings = \"N/A\",\n  encoding = \"utf8\"\n)\n\nThen we need to get the values of interest for each commune. Agreste data provide one row per commune, so we don’t need to further pre-process this file.\n\n# match the INSEE CODE\nm0 &lt;- match(commune_L93$INSEE_COM, agreste$Code)\n# table(is.na(m0))\n\n# SAU : superficie agricole utilisée, in ha\ncommune_L93$SAU_ha &lt;- agreste$SAU.en.2020[m0]\n\n# calculate percentage of agricultural land\n# but some SAU are bigger than commune area\n# need to be checked further ...\ncommune_L93$pct_SAU &lt;- ifelse(\n  commune_L93$area_ha &lt; commune_L93$SAU_h,\n  100,\n  commune_L93$SAU_ha / commune_L93$area_ha * 100\n)\nsummary(commune_L93$pct_SAU)\n\n\n# Percentage of farmers older than 55\nvar &lt;- \"Part.des.chefs.d.exploitation.et.coexploitants.de.55.ans.ou.plus..2020\"\ncommune_L93$pct_55p &lt;- agreste[m0, var]\nsummary(commune_L93$pct_55p)\n\n\nVisualization\n\n\nCode\n# visualize the Percentage of cultivated area\nmf_map(\n  x = commune_L93,\n  var = \"pct_SAU\",\n  type = \"choro\",\n  breaks = \"equal\",\n  nbreaks = 10,\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"percentage\",\n)\n# layout elements\nmf_title(\"Percentage surface agricole\")\nmf_credits(\"Sources: Agreste – Recensements agricoles, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# visualize the percentage of head farmer of 55+\nmf_map(\n  x = commune_L93,\n  var = \"pct_55p\",\n  type = \"choro\",\n  breaks = \"equal\",\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"percentage\",\n)\n# layout elements\nmf_title(\"Percentage of farm's head older than 55\")\nmf_credits(\"Sources: Agreste – Recensements agricoles, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\n\n3. Extract information from RASTER\nAs an example, we use the land cover information as gridded dataset. Let’s estimate the proportion of forest per commune. The data comes from OSO land cover. Specifically, we use the geotiff file Classif_Seed_0_2020.tif.\nFirst, we need to load and reclassify the forest pixels.\n\n# reclassify forest cover with 0 and 1\n# it takes a long time to reclassify the raster\n# so only if not already available\nfile5 &lt;- \"OSO_forest.tif\"\nif (!file.exists(file.path(datadir, file5))) {\n  oso &lt;- rast(file.path(datadir, file4))\n  # reclassification matrix\n  # forest are classes 16 and 17\n  matc &lt;- matrix(\n    c(0, 15.5, 0, 15.5, 17.5, 1, 17.5, 23, 0),\n    ncol = 3,\n    byrow = TRUE\n  )\n  # classify OSO land cover per forest\n  forest &lt;- classify(\n    oso,\n    matc,\n    include.lowest = TRUE,\n    filename = file.path(datadir, file5)\n  )\n  # might be faster (to be tested)\n  # forest &lt;- clamp(oso, lower = 16, upper = 17, values = TRUE)\n  # forest[!is.na(forest)] &lt;- 1\n  # forest[is.na(forest)] &lt;- 0\n} else {\n  forest &lt;- rast(file.path(datadir, file5))\n}\n\nThen we can extract zonal statistics for each commune (it takes a long time to run).\n\n# much faster (but still takes long time)\nzonal_forest = exact_extract(forest, commune_L93, fun = \"mean\")\n\n# save the percentage of forest in the vector object\ncommune_L93$pct_forest &lt;- zonal_forest * 100\n\n# exactextractr is faster than terra::zonal\n# commune_terra &lt;- vect(commune_L93)\n# zonal_forest &lt;- zonal(forest, commune_terra, fun = mean, weights = TRUE)\n\n\nVisualization\n\n\nCode\n# visualize the agricultural income per hectare\nmf_map(\n  x = commune_L93,\n  var = \"pct_forest\",\n  type = \"choro\",\n  breaks = \"equal\",\n  nbreaks = 10,\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"percentage\",\n)\n# layout elements\nmf_title(\"Percentage of forest\")\nmf_credits(\"Sources: OSO Land Cover, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\n\n4. Extract information from POLYGONS\nLet’s now estimate the proportion of parcels certified as organic farming. The data comes from Parcelles en Agriculture Biologique (AB) déclarées à la PAC. Specifically, we use the shapefile rpg-bio-2020-national.shp.\n\nbio &lt;- st_read(\"data/rpg-bio-2020-national.shp\")\n\n# Extract overlapping areas (takes some time &lt;2min)\noverlaps &lt;- st_intersection(commune_L93, bio)\n# dim(overlaps) # 993116\n# dim(bio) # 931387\n\n# Calculate area of overlaps\noverlaps$area_ha &lt;- as.numeric(st_area(overlaps)) * 0.0001\n\n# summarize the area of organic farming per commune\nbio_ha_commune &lt;- tapply(\n  overlaps$area_ha,\n  overlaps$INSEE_COM,\n  sum,\n  na.rm = TRUE\n)\n\n# save the information in the shapefile\n# match with the shapefile\nm0 &lt;- match(commune_L93$INSEE_COM, names(bio_ha_commune))\ncommune_L93$bio_ha &lt;- bio_ha_commune[m0]\n# NA means no organic fiels\ncommune_L93$bio_ha[is.na(commune_L93$bio_ha)] &lt;- 0\n\n# calculate the percentage of bio\ncommune_L93$bio_pct &lt;- commune_L93$bio_ha / commune_L93$area_ha * 100\nsummary(commune_L93$bio_pct)\n\n\nVisualization\n\n\nCode\n# visualize the agricultural income per hectare\nmf_map(\n  x = commune_L93,\n  var = \"pct_bio\",\n  type = \"choro\",\n  breaks = \"equal\",\n  nbreaks = 10,\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"percentage\",\n)\n# layout elements\nmf_title(\"Percentage of organic land\")\nmf_credits(\"Sources: RPG, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\n\n5. Export indicators\n\nAs vector\n\n# not sure why, but variables are renamed incoherently\n# it helps to transform '_' by '.'\n\nnames(commune_L93) &lt;- gsub(\"_\", \".\", names(commune_L93))\n\n# export as shapefile\nst_write(\n  commune_L93,\n  dsn = file.path(datadir, \"Communes_Indicators.shp\"),\n  append = FALSE\n)\n\n\n\nAs raster\n\n# transform to raster with terra\n# need to transform sf object to terra::vect()\ncommune_terra &lt;- vect(commune_L93)\n\n# create a grid with 1km resolution\ngrid1k &lt;- rast(commune_terra, res = 1000)\n\n# rasterize\npsau &lt;- terra::rasterize(\n  commune_terra,\n  grid1k,\n  field = \"pct_SAU\",\n  filename = file.path(datadir, \"Communes_1km_pctSAU.tif\"),\n  overwrite = TRUE\n)\n\n# with stars, not sure how to set the resolution\n# pct_sau &lt;- stars::st_rasterize(\n#   commune_L93[\"pct_SAU\"],\n#   file = file.path(datadir, \"Communes_2020_pctSAU.tif\"),\n#   driver = \"GTiff\"\n# )\n\n\nVisualization\n\n\nCode\n# visualize the agricultural income per hectare\nmf_raster(psau, leg_title = \"percentage\")\n# layout elements\nmf_title(\"Percentage of agricultural land\")\nmf_credits(\"Sources: Agreste – Recensements agricoles, 2020\")\nmf_arrow()\nmf_scale()"
  },
  {
    "objectID": "tuto_rasters_10m.html",
    "href": "tuto_rasters_10m.html",
    "title": "Tutorial on creating high resolution rasters",
    "section": "",
    "text": "Aim\nThe goal is to explore high resolution datasets for characterizing the department of Landes (40), in Gironde (33), in Charente Maritime (17). We will focus on dataset from BD CARTO and vegetation indices from Copernicus\n\n\n0. Setting-up\n\nInstall and load packages\nFor this workflow, we mostly rely on terra R package.\n\n# make sure needed packages are installed\npak &lt;- c(\"terra\", \"here\")\nif (!requireNamespace(pak, quietly = TRUE)) {\n  install.packages(pak)\n}\n\n# load packages\nlibrary(terra) |&gt; suppressPackageStartupMessages()\nlibrary(here) |&gt; suppressPackageStartupMessages()\n\n# set data directory\ndatadir &lt;- here(\"data\")\n\n\n\nDownload data\nThe BD CARTO needs to be downloaded and stored in data/ folder. You can download them by hand and move them to the data/ folder. Or you can run the code below to do this step automatically (total size: 700Mb).\n\n\nCode\nif (!dir.exists(datadir)) {\n  dir.create(\n    path = datadir,\n    showWarnings = FALSE,\n    recursive = TRUE\n  )\n}\n\noptions(timeout = 1500)\n\ndep &lt;- c(\"17\", \"33\", \"40\")\nbase_url &lt;- \"https://data.geopf.fr/telechargement/download/BDCARTO/BDCARTO_5-0_TOUSTHEMES_SHP_LAMB93_D0XX_2025-03-15/BDCARTO_5-0_TOUSTHEMES_SHP_LAMB93_D0XX_2025-03-15.7z\"\nfor (i in dep) {\n  diri &lt;- paste0(\"BDCARTO_5-0_TOUSTHEMES_SHP_LAMB93_D0\", i, \"_2025-03-15\")\n  if (!dir.exists(here::here(datadir, diri))) {\n    tempfile &lt;- file.path(datadir, \"temp_17.7z\")\n    download.file(gsub(\"XX\", i, base_url), tempfile, mode = \"wb\")\n    # extract all\n    archive::archive_extract(tempfile, dir = datadir)\n    # remove archive\n    file.remove(tempfile)\n  }\n}\n\n\nVegetation index from COPERNICUS Land Monitoring Service requires registration, so it’s easier to download them by hand. As an example, I downloaded (4Gb) the Seasonal Productivity of 2023 at 10m spatial resolution (DOI 10.2909/5ae0f2a2-7ad8-4f7c-878d-f1b09d78d7a1).\n\n\nSet spatial extent and grid\n\ndep_files &lt;- list.files(datadir, \"DEPARTEMENT.shp\", recursive = TRUE)\ndep33 &lt;- dep_files[grepl(\"033\", dep_files)]\nshp &lt;- vect(here(datadir, dep33))\nshp &lt;- shp[shp$INSEE_DEP %in% dep]\nplot(shp)\n\n# create grid with 10m resolution\ngrid10 &lt;- rast(shp, res = 10)\n\n# create a small zoom for testing\n# set a an area at +/-2.5km (500 pixels)\nmean_ext &lt;- mean(ext(shp))\nz &lt;- ext(rep(mean_ext, each = 2) + rep(c(-2500, 2500), 2))\nzoom10 &lt;- crop(grid10, z)\n\nplot(z, col = \"red\", border = NA, add = TRUE)\n\n\n\n\n\n\n\n\nAll analysis will be carried out for the three departments.\nAs an illustration, maps will zoom on the small 500x500 pixel area at the centre of the study area.\n\n\n\n1. Land cover\n\n#load all land cover data\nlulc_files &lt;- list.files(\n  datadir,\n  \"OCCUPATION_DU_SOL.shp\",\n  recursive = TRUE,\n  full.names = TRUE\n)\nlulc_list &lt;- lapply(lulc_files, vect)\nlulc &lt;- do.call(rbind, lulc_list)\n\ntable(lulc$NATURE)\n\n\n              Bâti       Broussailles Carrière, décharge          Eau libre \n              1351                 42                 71                163 \n             Forêt  Marais, tourbière            Prairie     Sable, gravier \n              2889                132               3011                 43 \n     Vigne, verger   Zone d'activités \n              1072                469 \n\n# might be good to group some of the categories?\n\n\n# clip the land cover with the regions\nlulc &lt;- crop(lulc, shp)\n# plot(lc, col= rainbow(10)[as.factor(lc$NATURE)], border=NA)\n\n# rasterize at 10m resolution\nlulc_gd &lt;- rasterize(\n  lulc,\n  grid10,\n  field = \"NATURE\",\n  filename = here(datadir, \"BDCARTO_173340_LULC_10m.tif\"),\n  overwrite = TRUE\n)\n\nplot(lulc_gd)\nplot(shp, add = TRUE, border = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n2. Road network\n\n#load all road network\nroad_files &lt;- list.files(\n  datadir,\n  \"TRONCON_DE_ROUTE.shp\",\n  recursive = TRUE,\n  full.names = TRUE\n)\nroad_list &lt;- lapply(road_files, vect)\nroad &lt;- do.call(rbind, road_list)\n\ntable(road$NATURE)\n\n\nBac ou liaison maritime                Bretelle                  Chemin \n                     54                    1476                   58445 \n               Escalier              Rond-point      Route à 1 chaussée \n                      3                      28                  363647 \n    Route à 2 chaussées         Route empierrée                 Sentier \n                   7063                   41656                     514 \n       Type autoroutier \n                   2773 \n\n# might need to remove some type of roads ...\n\n\n# clip the land cover with the regions (take some time)\nroad &lt;- crop(road, shp)\n\n# might be good to set the width of the road based on its nature\ntable(road$NATURE)\n\n# plot(road, col= rainbow(10)[as.factor(road$NATURE)])\n\n# rasterize\nroad_gd &lt;- terra::rasterize(\n  road,\n  grid10,\n  touches = TRUE,\n  filename = here(datadir, \"BDCARTO_173340_Road_10m.tif\"),\n  overwrite = TRUE\n) # add field = \"NATURE\" to keep information on type of roads\n\n\n\n\n\n\n\n\n\n\n\n\n3. Rivers and lake\n\n#load all rivers\nriver_files &lt;- list.files(\n  datadir,\n  \"TRONCON_HYDROGRAPHIQUE.shp\",\n  recursive = TRUE,\n  full.names = TRUE\n)\nriver_list &lt;- lapply(river_files, vect)\nriver &lt;- do.call(rbind, river_list)\n\nlake_files &lt;- list.files(\n  datadir,\n  \"SURFACE_HYDROGRAPHIQUE.shp\",\n  recursive = TRUE,\n  full.names = TRUE\n)\nlake_list &lt;- lapply(lake_files, vect)\nlake &lt;- do.call(rbind, lake_list)\n\ntable(river$NATURE)\n\n\n                   Aqueduc                      Canal \n                        45                      27900 \n              Conduit buse        Ecoulement canalisé \n                       978                         22 \n     Ecoulement endoréique         Ecoulement naturel \n                         1                      60102 \n                  Estuaire                   Inconnue \n                       465                       1542 \n                       Lac                     Marais \n                       416                        130 \n                      Mare     Plan d'eau de gravière \n                         6                         40 \n          Réservoir-bassin   Réservoir-bassin d'orage \n                       120                          2 \nRéservoir-bassin piscicole                    Retenue \n                        11                       3225 \n           Retenue-barrage   Retenue-bassin portuaire \n                       279                         10 \n\ntable(lake$NATURE)\n\n\n                     Canal               Conduit buse \n                        17                          1 \n       Ecoulement canalisé         Ecoulement naturel \n                         2                        391 \n                  Estuaire                        Lac \n                       245                        373 \n                    Marais                       Mare \n                       378                         18 \n    Plan d'eau de gravière           Réservoir-bassin \n                       304                      14305 \n  Réservoir-bassin d'orage Réservoir-bassin piscicole \n                         8                         60 \n                   Retenue            Retenue-barrage \n                      3204                         81 \n  Retenue-bassin portuaire \n                        26 \n\n\n\n# clip the river and lake in the area of interest\n# can take a long time\nriver &lt;- crop(river, shp)\nlake &lt;- crop(lake, shp)\n\nplot(river, col = rainbow(18)[as.factor(river$NATURE)])\nplot(lake, add = TRUE, col = \"blue\", border = NA)\n\n# rasterize river and lake\nriver_gd &lt;- rasterize(river, grid10, touches = TRUE)\nlake_gd &lt;- rasterize(lake, grid10, touches = TRUE)\n\n# replace NA by 0\nriver_gd[is.na(river_gd)] &lt;- 0\nlake_gd[is.na(lake_gd)] &lt;- 0\n\n# add rivers and lakes in a\nwater_gd &lt;- river_gd + lake_gd\n\n# set NA for the areas without rivers or lake\nNAflag(water_gd) &lt;- 0\n\n# export the raster\nwriteRaster(\n  water_gd,\n  here(datadir, \"BDCARTO_173340_Water_10m.tif\"),\n  overwrite = TRUE\n)\n\nplot(water_gd)\n\n\n\n\n\n\n\n\n\n\n\n\n4. Primary production\nHere, we load the dataset from Copernicus LMS.\n\n# load all rasters\nvpp_files &lt;- list.files(\n  datadir,\n  \"VPP_2023_S2\",\n  recursive = TRUE,\n  full.names = TRUE\n)\nlist_rast &lt;- lapply(vpp_files, rast) |&gt; sprc()\n\n# make a mosaic\nvpp &lt;- mosaic(\n  list_rast,\n  filename = here(datadir, \"VPP_2023_UTM30N_10m.tif\"),\n  overwrite = TRUE\n)\n\n# project department in UTM30N\nshp_32630 &lt;- project(shp, \"EPSG:32630\")\n\n# crop to extent of interest (to reduce the mosaic)\nvpp_clip &lt;- crop(vpp, ext(shp_32630))\n\n# project to Lambert 93\nvpp_2154 &lt;- project(vpp_clip, crs(grid10))\n\n# resample on our 10x10m grid\nvpp_gd &lt;- resample(\n  vpp_2154,\n  grid10,\n  method = \"average\"\n)\n\n# crop to extent the departments\nvpp_gd &lt;- crop(\n  vpp_gd,\n  shp,\n  mask = TRUE,\n  filename = here(datadir, \"VPP_2023_Lamber93_10m.tif\"),\n  overwrite = TRUE\n)\n\nplot(vpp_gd)"
  }
]