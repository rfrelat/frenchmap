[
  {
    "objectID": "tuto_commune_2020.html",
    "href": "tuto_commune_2020.html",
    "title": "Tutorial on describing French municipalities",
    "section": "",
    "text": "Aim\nThe goal is to explore the steps of data processing that are needed to get information on French agricultural landscape using freely available data and R.\nThe communes (=town, municipality) in 2020 are used as the scale and backbone of our analysis.\n\n\n0. Setting-up\n\nInstall and load packages\nFor this workflow, we need a few packages. Let’s load them (and install them if needed).\n\n# make sure needed packages are installed\npak &lt;- c(\"sf\", \"terra\", \"mapsf\", \"here\", \"archive\", \"lwgeom\", \"exactextractr\")\nif (!requireNamespace(pak, quietly = TRUE)) {\n  install.packages(pak)\n}\n\n# load packages\nlibrary(sf) |&gt; suppressPackageStartupMessages()\nsf_use_s2(FALSE) |&gt; suppressMessages()\n# with sf_use_s2(FALSE), sf uses lwgeom package for st_area\nlibrary(terra) |&gt; suppressPackageStartupMessages()\nlibrary(mapsf)\nlibrary(here) |&gt; suppressPackageStartupMessages()\nlibrary(archive)\nlibrary(exactextractr)\n\n# On Rossinante, we need to install libarchive\n# * deb: libarchive-dev (Debian, Ubuntu, etc)\n\n\n\nDownload data\nFour datasets are needed to run the following analysis. You can download them one by one by hand and move them to the data/ folder. Or you can run the code below to do this step automatically (total size: &gt;2Gb).\n\n\nCode\n# set data directory\ndatadir &lt;- here::here(\"data\")\nif (!dir.exists(datadir)) {\n  dir.create(\n    path = datadir,\n    showWarnings = FALSE,\n    recursive = TRUE\n  )\n}\n\noptions(timeout = 1500)\n\n# download commune data\nfile1 &lt;- \"ADMIN-EXPRESS-COG_2-1_2020-11-20_COMMUNE.\"\nurl1 &lt;- \"https://data.geopf.fr/telechargement/download/ADMIN-EXPRESS-COG/ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-11-20/ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-11-20.7z\"\ndirshp &lt;- \"ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-11-20/ADMIN-EXPRESS-COG/1_DONNEES_LIVRAISON_2020-11-20/ADE-COG_2-1_SHP_WGS84G_FRA/COMMUNE.\"\nshpext &lt;- c(\"cpg\", \"dbf\", \"prj\", \"shp\", \"shx\")\nif (!file.exists(here::here(datadir, paste0(file1, shpext[1])))) {\n  # download archive\n  temp &lt;- file.path(datadir, \"temp.7z\")\n  download.file(url1, temp, mode = \"wb\")\n  # extract only the COMMUNE.shp\n  archive::archive_extract(temp, dir = datadir, files = paste0(dirshp, shpext))\n  # copy and rename\n  file.copy(\n    from = file.path(datadir, paste0(dirshp, shpext)),\n    to = file.path(datadir, paste0(file1, shpext))\n  )\n  # remove temporary files\n  file.remove(file.path(datadir, paste0(dirshp, shpext)))\n  file.remove(temp)\n  # remove temporary repository\n  unlink(\n    file.path(datadir, \"ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-11-20\"),\n    recursive = TRUE\n  )\n}\n\n# download agreste dataset (not needed if repository cloned)\nfile2 &lt;- \"data_Agreste_Commune.csv\"\nurl2 &lt;- \"https://github.com/rfrelat/frenchmap/raw/refs/heads/main/data/data_Agreste_Commune.csv\"\nif (!file.exists(file.path(datadir, file2))) {\n  temp &lt;- file.path(datadir, file2)\n  download.file(url2, temp, mode = \"wb\")\n}\n\n# download bio parcelles RPG data\nfile3 &lt;- \"rpg-bio-2020-national.shp\"\nurl3 &lt;- \"https://www.data.gouv.fr/api/1/datasets/r/6428e701-1229-43b7-aaf7-16bbed2ea507\"\nif (!file.exists(file.path(datadir, file3))) {\n  temp &lt;- file.path(datadir, \"rpg-bio-2020-national.zip\")\n  download.file(url3, temp, mode = \"wb\")\n  unzip(temp, exdir = datadir)\n  file.remove(temp)\n}\n\n\n# download OSO land cover plus\nfile4 &lt;- \"Classif_Seed_0_2020.tif\"\nurl4 &lt;- \"https://zenodo.org/records/6538861/files/Classif_Seed_0_2020.tif?download=1\"\nif (!file.exists(file.path(datadir, file4))) {\n  temp &lt;- file.path(datadir, file4)\n  download.file(url4, temp, mode = \"wb\")\n}\n\n\n\n\n\n1. Load Admin Express commune\nThe spatial definition of commune comes from IGN Geoservices. We will use the shapefile for the year 2020: ADMIN-EXPRESS-COG_2-1_2020-11-20_COMMUNE.shp.\nAfter download and extraction of the archive, load the data in R:\n\n# load shapefile\ncommune &lt;- st_read(\"data/ADMIN-EXPRESS-COG_2-1_2020-11-20_COMMUNE.shp\")\n\n# remove DOM-TOM\ncommune &lt;- commune[!commune$INSEE_DEP %in% 971:976, ]\n\n# for mapping and extraction, we project the shapefile to Lambert 93 (EPSG:2154)\ncommune_L93 &lt;- st_transform(commune, crs = 2154)\n\n# calculate area in ha\ncommune_L93$area_ha &lt;- as.numeric(st_area(commune_L93)) * 0.0001\n\n\n\nVisualization\n\n\nCode\n# visualize the area of communes\nmf_map(\n  x = commune_L93,\n  var = \"area_ha\",\n  type = \"choro\",\n  breaks = \"geom\",\n  nbreaks = 8,\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"ha\",\n)\n# layout elements\nmf_title(\"Commune surface\")\nmf_credits(\"Sources: IGN Geoservices, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\n\n2. Extract information from CSV\nAs an example, we will use data from Agreste downloaded at the commune level for 2020.\n\nagreste &lt;- read.table(\n  \"data/data_Agreste_Commune.csv\",\n  skip = 2,\n  sep = \";\",\n  quote = \"\\\"\",\n  header = TRUE,\n  na.strings = \"N/A\",\n  encoding = \"utf8\"\n)\n\nThen we need to get the values of interest for each commune. Agreste data provide one row per commune, so we don’t need to further pre-process this file.\n\n# match the INSEE CODE\nm0 &lt;- match(commune_L93$INSEE_COM, agreste$Code)\n# table(is.na(m0))\n\n# SAU : superficie agricole utilisée, in ha\ncommune_L93$SAU_ha &lt;- agreste$SAU.en.2020[m0]\n\n# calculate percentage of agricultural land\n# but some SAU are bigger than commune area\n# need to be checked further ...\ncommune_L93$pct_SAU &lt;- ifelse(\n  commune_L93$area_ha &lt; commune_L93$SAU_h,\n  100,\n  commune_L93$SAU_ha / commune_L93$area_ha * 100\n)\nsummary(commune_L93$pct_SAU)\n\n\n# Percentage of farmers older than 55\nvar &lt;- \"Part.des.chefs.d.exploitation.et.coexploitants.de.55.ans.ou.plus..2020\"\ncommune_L93$pct_55p &lt;- agreste[m0, var]\nsummary(commune_L93$pct_55p)\n\n\nVisualization\n\n\nCode\n# visualize the Percentage of cultivated area\nmf_map(\n  x = commune_L93,\n  var = \"pct_SAU\",\n  type = \"choro\",\n  breaks = \"equal\",\n  nbreaks = 10,\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"percentage\",\n)\n# layout elements\nmf_title(\"Percentage surface agricole\")\nmf_credits(\"Sources: Agreste – Recensements agricoles, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# visualize the percentage of head farmer of 55+\nmf_map(\n  x = commune_L93,\n  var = \"pct_55p\",\n  type = \"choro\",\n  breaks = \"equal\",\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"percentage\",\n)\n# layout elements\nmf_title(\"Percentage of farm's head older than 55\")\nmf_credits(\"Sources: Agreste – Recensements agricoles, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\n\n3. Extract information from RASTER\nAs an example, we use the land cover information as gridded dataset. Let’s estimate the proportion of forest per commune. The data comes from OSO land cover. Specifically, we use the geotiff file Classif_Seed_0_2020.tif.\nFirst, we need to load and reclassify the forest pixels.\n\n# reclassify forest cover with 0 and 1\n# it takes a long time to reclassify the raster\n# so only if not already available\nfile5 &lt;- \"OSO_forest.tif\"\nif (!file.exists(file.path(datadir, file5))) {\n  oso &lt;- rast(file.path(datadir, file4))\n  # reclassification matrix\n  # forest are classes 16 and 17\n  matc &lt;- matrix(\n    c(0, 15.5, 0, 15.5, 17.5, 1, 17.5, 23, 0),\n    ncol = 3,\n    byrow = TRUE\n  )\n  # classify OSO land cover per forest\n  forest &lt;- classify(\n    oso,\n    matc,\n    include.lowest = TRUE,\n    filename = file.path(datadir, file5)\n  )\n  # might be faster (to be tested)\n  # forest &lt;- clamp(oso, lower = 16, upper = 17, values = TRUE)\n  # forest[!is.na(forest)] &lt;- 1\n  # forest[is.na(forest)] &lt;- 0\n} else {\n  forest &lt;- rast(file.path(datadir, file5))\n}\n\nThen we can extract zonal statistics for each commune (it takes a long time to run).\n\n# much faster (but still takes long time)\nzonal_forest = exact_extract(forest, commune_L93, fun = \"mean\")\n\n# save the percentage of forest in the vector object\ncommune_L93$pct_forest &lt;- zonal_forest * 100\n\n# exactextractr is faster than terra::zonal\n# commune_terra &lt;- vect(commune_L93)\n# zonal_forest &lt;- zonal(forest, commune_terra, fun = mean, weights = TRUE)\n\n\nVisualization\n\n\nCode\n# visualize the agricultural income per hectare\nmf_map(\n  x = commune_L93,\n  var = \"pct_forest\",\n  type = \"choro\",\n  breaks = \"equal\",\n  nbreaks = 10,\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"percentage\",\n)\n# layout elements\nmf_title(\"Percentage of forest\")\nmf_credits(\"Sources: OSO Land Cover, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\n\n4. Extract information from POLYGONS\nLet’s now estimate the proportion of parcels certified as organic farming. The data comes from Parcelles en Agriculture Biologique (AB) déclarées à la PAC. Specifically, we use the shapefile rpg-bio-2020-national.shp.\n\nbio &lt;- st_read(\"data/rpg-bio-2020-national.shp\")\n\n# Extract overlapping areas (takes some time &lt;2min)\noverlaps &lt;- st_intersection(commune_L93, bio)\n# dim(overlaps) # 993116\n# dim(bio) # 931387\n\n# Calculate area of overlaps\noverlaps$area_ha &lt;- as.numeric(st_area(overlaps)) * 0.0001\n\n# summarize the area of organic farming per commune\nbio_ha_commune &lt;- tapply(\n  overlaps$area_ha,\n  overlaps$INSEE_COM,\n  sum,\n  na.rm = TRUE\n)\n\n# save the information in the shapefile\n# match with the shapefile\nm0 &lt;- match(commune_L93$INSEE_COM, names(bio_ha_commune))\ncommune_L93$bio_ha &lt;- bio_ha_commune[m0]\n# NA means no organic fiels\ncommune_L93$bio_ha[is.na(commune_L93$bio_ha)] &lt;- 0\n\n# calculate the percentage of bio\ncommune_L93$bio_pct &lt;- commune_L93$bio_ha / commune_L93$area_ha * 100\nsummary(commune_L93$bio_pct)\n\n\nVisualization\n\n\nCode\n# visualize the agricultural income per hectare\nmf_map(\n  x = commune_L93,\n  var = \"pct_bio\",\n  type = \"choro\",\n  breaks = \"equal\",\n  nbreaks = 10,\n  pal = \"Teal\",\n  border = NA,\n  leg_title = \"percentage\",\n)\n# layout elements\nmf_title(\"Percentage of organic land\")\nmf_credits(\"Sources: RPG, 2020\")\nmf_arrow()\nmf_scale()\n\n\n\n\n\n\n\n\n\n\n\n\n5. Export indicators\n\nAs vector\n\n# not sure why, but variables are renamed incoherently\n# it helps to transform '_' by '.'\n\nnames(commune_L93) &lt;- gsub(\"_\", \".\", names(commune_L93))\n\n# export as shapefile\nst_write(\n  commune_L93,\n  dsn = file.path(datadir, \"Communes_Indicators.shp\"),\n  append = FALSE\n)\n\n\n\nAs raster\n\n# transform to raster with terra\n# need to transform sf object to terra::vect()\ncommune_terra &lt;- vect(commune_L93)\n\n# create a grid with 1km resolution\ngrid1k &lt;- rast(commune_terra, res = 1000)\n\n# rasterize\npsau &lt;- terra::rasterize(\n  commune_terra,\n  grid1k,\n  field = \"pct_SAU\",\n  filename = file.path(datadir, \"Communes_1km_pctSAU.tif\"),\n  overwrite = TRUE\n)\n\n# with stars, not sure how to set the resolution\n# pct_sau &lt;- stars::st_rasterize(\n#   commune_L93[\"pct_SAU\"],\n#   file = file.path(datadir, \"Communes_2020_pctSAU.tif\"),\n#   driver = \"GTiff\"\n# )\n\n\nVisualization\n\n\nCode\n# visualize the agricultural income per hectare\nmf_raster(psau, leg_title = \"percentage\")\n# layout elements\nmf_title(\"Percentage of agricultural land\")\nmf_credits(\"Sources: Agreste – Recensements agricoles, 2020\")\nmf_arrow()\nmf_scale()"
  }
]